# When a release branch is created, this workflow will cut a release

name: Cut Release

on:
  workflow_dispatch:        
    inputs:
      target-commit-id:
        description: 'Commit ID (default HEAD)'
        required: false
      new-version:
        description: 'New version number'
        required: false
        
permissions:
  contents: write

jobs:
  cut-release:
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target-commit-id || github.sha }}

      - name: Determine new version
        id: load-versions
        env:
            VERSION: ${{ inputs.new-version }}
            GH_TOKEN: ${{ github.token }}
        run: |
          $newVersion = $env:VERSION
          $releases = gh release list --json isDraft,isLatest,isPrerelease,name,tagName | ConvertFrom-Json
          $latestRelease = $releases | Where-Object { $_.isLatest } | Select-Object -First 1
          $preRelease = $releases | Where-Object { $_.isPrerelease } | Select-Object -First 1
          
          if ($latestRelease -ne $null) {
              $latestVersion = $latestRelease.tagName
              echo "Latest version: $latestVersion"
              echo "LATEST_VERSION=$latestVersion" >> $env:GITHUB_OUTPUT
          }

          if ($newVersion -eq "") {
            if ($preRelease -ne $null) {
                echo "Pre-release already exists: $($preRelease.tagName)"
                exit 1
            }
            
            if ($latestRelease -eq $null) {
                $newVersion = "v1.0.0"
            } else {
                $latestVersion = $latestRelease.tagName
                $versionParts = $latestVersion -split '\.'
                $newVersion = "{0}.{1}.{2}" -f $versionParts[0], $versionParts[1]  + 1, 0
            }
          }
          echo "New version: $newVersion"
          echo "VERSION=$newVersion" >> $env:GITHUB_OUTPUT

      - name: Create the release branch
        env:
            VERSION: ${{ inputs.new-version || steps.load-versions.outputs.VERSION }}
            RELEASE_TARGET: ${{ inputs.target-commit-id || github.sha }}
        run: |
          $newVersion = $env:VERSION
          $versionParts = $newVersion -split '\.'
          $branchName = "release/$($versionParts[0]).$($versionParts[1])"

          echo "Creating branch: $branchName"
          git checkout -b $branchName 
          git push origin $branchName

      - name: Create the release
        env:
            VERSION: ${{ inputs.new-version || steps.load-versions.outputs.VERSION }}
            RELEASE_TARGET: ${{ inputs.target-commit-id || github.sha }}
            LATEST_VERSION: ${{ steps.load-versions.outputs.LAST_VERSION }}
            GH_TOKEN: ${{ github.token }}
        run: |
          $newVersion = $env:VERSION
          $initialRcVersion = $env:VERSION -replace '\.0$', '-rc.0'

          gh release create $initialRcVersion --title "Release $initialRcVersion" --target $env:RELEASE_TARGET --prerelease --generate-notes --notes-start-tag $env:LATEST_VERSION
