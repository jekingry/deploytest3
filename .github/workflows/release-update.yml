name: Release - Update

# Manual Steps: Pre-Release

# If:
# - Current Pre-Version = v2.3.0-rc.4

# Create Release
# gh release create v2.3.0-rc.5 --target release/v2.3 --prerelease --generate-notes --notes-start-tag v2.2.0
# gh release delete v2.3.0-rc.4

# Update main
# git checkout main
# git pull
# git merge --no-ff v2.3.0-rc.5 --message "Merge 'v2.3.0-rc.5'"
# git push origin main

# If conflicts then make PR:
# git checkout -b release-merge/v2.3.0-rc.5
# gh pr create --fill --base main --head release-merge/v2.3.0-rc.5 --label "merge-conflict"

on:
  push:
    branches:
      - 'release/*'

permissions:
  contents: write

defaults:
  run:
    shell: pwsh

jobs:
  get-release-type:
    runs-on: ubuntu-latest
    outputs:
      PRODUCTION_VERSION: ${{ steps.get-release-type.outputs.PRODUCTION_VERSION }}
      PRODUCTION_BRANCH: ${{ steps.get-release-type.outputs.PRODUCTION_BRANCH }}
      PRERELEASE_VERSION: ${{ steps.get-release-type.outputs.PRERELEASE_VERSION }}
      PRERELEASE_BRANCH: ${{ steps.get-release-type.outputs.PRERELEASE_BRANCH }}
      RELEASE_TYPE: ${{ steps.get-release-type.outputs.RELEASE_TYPE }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --depth=1 --tags

      - name: Get release versions
        id: get-release-type
        env:
            GH_TOKEN: ${{ github.token }}
            CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          $productionVersion = gh release list --json tagName,isLatest --jq ".[] | select(.isLatest) | .tagName"
          echo "Production release: $productionVersion"
          echo "PRODUCTION_VERSION=$productionVersion" >> $env:GITHUB_OUTPUT

          $parts= $productionVersion -split '\.'
          $productionVersionBranch = "release/$($parts[0]).$($parts[1])"
          echo "Production branch: $productionVersionBranch"
          echo "PRODUCTION_BRANCH=$productionVersionBranch" >> $env:GITHUB_OUTPUT

          $prereleaseVersion = gh release list --json tagName,isPrerelease --jq ".[] | select(.isPrerelease) | .tagName"
          echo "Pre-release: $prereleaseVersion"
          if ($prereleaseVersion -ne $null) {
            echo "PRERELEASE_VERSION=$prereleaseVersion" >> $env:GITHUB_OUTPUT

            $parts = $prereleaseVersion -split '\.'
            $prereleaseBranch = "release/$($parts[0]).$($parts[1])"

            echo "Pre-release branch: $prereleaseBranch"
            echo "PRERELEASE_BRANCH=$prereleaseBranch" >> $env:GITHUB_OUTPUT
          }

          $currentVersion = $null
          $releaseType = $null

          if ($env:CURRENT_BRANCH -eq $productionVersionBranch) {
            $currentVersion = $productionVersion
            $releaseType = "hotfix"
          } elseif ($env:CURRENT_BRANCH -eq $prereleaseBranch) {
            $currentVersion = $prereleaseVersion
            $releaseType = "prerelease"
          } else {
            echo "Unknown release branch"
            echo "RELEASE_TYPE=unknown" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # check if there are differences
          $diff = git diff --name-only "$currentVersion..HEAD"
          if ($diff -ne $null) {
            echo "There are differences between the $currentVersion and $($env:CURRENT_BRANCH)"
            echo "RELEASE_TYPE=$releaseType" >> $env:GITHUB_OUTPUT
          } else {
            echo "There are no differences between $currentVersion and $($env:CURRENT_BRANCH)"
            echo "RELEASE_TYPE=no-changes" >> $env:GITHUB_OUTPUT
          }

  hotfix-release:
    environment: ReleaseManagement
    runs-on: ubuntu-latest
    needs: get-release-type
    if: ${{ needs.get-release-type.outputs.RELEASE_TYPE == 'hotfix' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}    

      - name: Create new hotfix release
        env:
            PRODUCTION_VERSION: ${{ needs.get-release-type.outputs.PRODUCTION_VERSION }}
            PRODUCTION_BRANCH: ${{ needs.get-release-type.outputs.PRODUCTION_BRANCH }}
            GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          $productionVersion = $env:PRODUCTION_VERSION
          $parts = $productionVersion -split '\.'
          $major = $parts[0]
          $minor = $parts[1]
          $patch = 1 + [int]$parts[2]

          $newVersion = "$major.$minor.$patch"

          echo "New hotfix version: $newVersion"
          git tag $newVersion HEAD
          git push origin $newVersion
          gh release create $newVersion `
            --title "Release $newVersion" `
            --generate-notes `
            --notes-start-tag $productionVersion 
                    
          # Attempt to merge into main if no conflicts
          git fetch origin main
          git checkout main
          git config user.name "github-actions[bot]"
          git config user.email "${{ github.actor_id }}+github-actions[bot]@users.noreply.github.com"      
          (git merge --no-ff --message "Merge $newVersion" $newVersion && git push origin main) || {
            echo "Merge conflicts detected. Creating a pull request."
            $mergeBranch = "release-merge/$newVersion"
            git checkout -b $mergeBranch $newVersion
            git push -u origin $mergeBranch
            gh pr create `
              --title "Release $newVersion to main" `
              --body "This PR resolves merge conflicts between $newVersion and main." `
              --base main `
              --head $mergeBranch `
              --label "merge-conflict"
          }

  update-prerelease:
    environment: ReleaseManagement
    runs-on: ubuntu-latest
    needs: get-release-type
    if: ${{ needs.get-release-type.outputs.RELEASE_TYPE == 'prerelease' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Create new RC release
        env:
            PRERELEASE_VERSION: ${{ needs.get-release-type.outputs.PRERELEASE_VERSION }}
            PRERELEASE_BRANCH: ${{ needs.get-release-type.outputs.PRERELEASE_BRANCH }}
            PRODUCTION_VERSION: ${{ needs.get-release-type.outputs.PRODUCTION_VERSION }}
            GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          $prereleaseVersion = $env:PRERELEASE_VERSION
          $parts = $prereleaseVersion -split '\.'
          $currentRc = [int]$parts[3]
          $nextRc = $currentRc + 1
          $newRcVersion = "$($parts[0]).$($parts[1]).$($parts[2]).$nextRc"

          echo "New RC version: $newRcVersion"
          git tag $newRcVersion HEAD
          git push origin $newRcVersion
          gh release create $newRcVersion `
            --title "Release Candidate $newRcVersion" `
            --prerelease `
            --generate-notes `
            --notes-start-tag $env:PRODUCTION_VERSION
          
          # Delete old RC release
          gh release delete $prereleaseVersion --cleanup-tag --yes
          
          # Attempt to merge into main if no conflicts
          git fetch origin main
          git checkout main
          git config user.name "github-actions[bot]"
          git config user.email "${{ github.actor_id }}+github-actions[bot]@users.noreply.github.com"      
          (git merge --no-ff --message "Merge $newRcVersion" $newRcVersion && git push origin main) || {
            echo "Merge conflicts detected. Creating a pull request."
            $mergeBranch = "release-merge/$newRcVersion"
            git checkout -b $mergeBranch $newRcVersion
            git push -u origin $mergeBranch
            gh pr create `
              --title "Release Candidate $newRcVersion to main" `
              --body "This PR resolves merge conflicts between $newRcVersion and main." `
              --base main `
              --head $mergeBranch `
              --label "merge-conflict"
          }

