name: Release - Update

# Manual Steps: Pre-Release

# If:
# - Current Pre-Version = v2.3.0-rc.4

# Create Release
# gh release create v2.3.0-rc.5 --target release/v2.3 --prerelease --generate-notes --notes-start-tag v2.2.0
# gh release delete v2.3.0-rc.4

# Update main
# git checkout main
# git pull
# git merge --no-ff v2.3.0-rc.5 --message "Merge 'v2.3.0-rc.5'"
# git push origin main

# If conflicts then make PR:
# git checkout -b release-merge/v2.3.0-rc.5
# gh pr create --fill --base main --head release-merge/v2.3.0-rc.5 --label "merge-conflict"

on:
  push:
    branches:
      - 'release/*'

permissions:
  contents: write

defaults:
  run:
    shell: pwsh

jobs:
  get-release-type:
    runs-on: ubuntu-latest
    outputs:
      PRODUCTION_VERSION: ${{ steps.get-release-type.outputs.PRODUCTION_VERSION }}
      PRODUCTION_BRANCH: ${{ steps.get-release-type.outputs.PRODUCTION_BRANCH }}
      PRERELEASE_VERSION: ${{ steps.get-release-type.outputs.PRERELEASE_VERSION }}
      PRERELEASE_BRANCH: ${{ steps.get-release-type.outputs.PRERELEASE_BRANCH }}
      RELEASE_TYPE: ${{ steps.get-release-type.outputs.RELEASE_TYPE }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --depth=1 --tags

      - name: Get release versions
        id: get-release-type
        env:
            GH_TOKEN: ${{ github.token }}
            CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          $productionVersion = gh release list --json tagName,isLatest --jq ".[] | select(.isLatest) | .tagName"
          echo "Production release: $productionVersion"
          echo "PRODUCTION_VERSION=$productionVersion" >> $env:GITHUB_OUTPUT

          $parts= $productionVersion -split '\.'
          $productionVersionBranch = "release/$($parts[0]).$($parts[1])"
          echo "Production branch: $productionVersionBranch"
          echo "PRODUCTION_BRANCH=$productionVersionBranch" >> $env:GITHUB_OUTPUT

          $prereleaseVersion = gh release list --json tagName,isPrerelease --jq ".[] | select(.isPrerelease) | .tagName"
          echo "Pre-release: $prereleaseVersion"
          if ($prereleaseVersion -ne $null) {
            echo "PRERELEASE_VERSION=$prereleaseVersion" >> $env:GITHUB_OUTPUT

            $parts = $prereleaseVersion -split '\.'
            $prereleaseBranch = "release/$($parts[0]).$($parts[1])"

            echo "Pre-release branch: $prereleaseBranch"
            echo "PRERELEASE_BRANCH=$prereleaseBranch" >> $env:GITHUB_OUTPUT
          }

          $currentVersion = $null
          $releaseType = $null

          if ($env:CURRENT_BRANCH -eq $productionVersionBranch) {
            $currentVersion = $productionVersion
            $releaseType = "hotfix"
          } elseif ($env:CURRENT_BRANCH -eq $prereleaseBranch) {
            $currentVersion = $prereleaseVersion
            $releaseType = "prerelease"
          } else {
            echo "Unknown release branch"
            echo "RELEASE_TYPE=unknown" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # check if there are differences
          $diff = git diff --name-only "$currentVersion..HEAD"
          if ($diff -ne $null) {
            echo "There are differences between the $currentVersion and $($env:CURRENT_BRANCH)"
            echo "RELEASE_TYPE=$releaseType" >> $env:GITHUB_OUTPUT
          } else {
            echo "There are no differences between $currentVersion and $($env:CURRENT_BRANCH)"
            echo "RELEASE_TYPE=no-changes" >> $env:GITHUB_OUTPUT
          }

  hotfix-release:
    environment: ReleaseManagement
    runs-on: ubuntu-latest
    needs: get-release-type
    if: ${{ needs.get-release-type.outputs.RELEASE_TYPE == 'hotfix' }}
    outputs: 
      NEW_VERSION: ${{ steps.calculate-version.outputs.NEW_VERSION }}
      MERGE_BASE: ${{ steps.find-merge-base.outputs.MERGE_BASE }}
    env:
      GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
      TARGET_COMMIT: ${{ github.sha }}
      PRERELEASE_VERSION: ${{ needs.get-release-type.outputs.PRERELEASE_VERSION }}
      PRERELEASE_BRANCH: ${{ needs.get-release-type.outputs.PRERELEASE_BRANCH }}
      PRODUCTION_VERSION: ${{ needs.get-release-type.outputs.PRODUCTION_VERSION }}
      PRODUCTION_BRANCH: ${{ needs.get-release-type.outputs.PRODUCTION_BRANCH }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          
      - name: Calculate new version
        id: calculate-version
        run: |
          $productionVersion = $env:PRODUCTION_VERSION
          $parts = $productionVersion -split '\.'
          $major = $parts[0]
          $minor = $parts[1]
          $patch = 1 + [int]$parts[2]

          $newVersion = "$major.$minor.$patch"

          echo "New hotfix version: $newVersion"
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT        T          

      - name: Create new hotfix release
        env:
          NEW_VERSION: ${{ steps.calculate-version.outputs.NEW_VERSION }}
        run: |
          gh release create $env:NEW_VERSION `
            --title "Release $($env:NEW_VERSION)" `
            --generate-notes `
            --notes-start-tag $env:PRODUCTION_VERSION `
            --target $env:TARGET_COMMIT

      - name: Find merge base
        id: find-merge-base
        run: |          
          $mergeBase = "main"
          if ($env:PRERELEASE_VERSION) {
            $mergeBase = $env:PRERELEASE_BRANCH
          }        
          echo "MERGE_BASE=$mergeBase" >> $env:GITHUB_OUTPUT

  update-prerelease:
    environment: ReleaseManagement
    runs-on: ubuntu-latest
    needs: get-release-type
    if: ${{ needs.get-release-type.outputs.RELEASE_TYPE == 'prerelease' }}
    outputs: 
      NEW_VERSION: ${{ steps.calculate-version.outputs.NEW_VERSION }}
      MERGE_BASE: "main"
    env:
      GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
      TARGET_COMMIT: ${{ github.sha }}
      PRERELEASE_VERSION: ${{ needs.get-release-type.outputs.PRERELEASE_VERSION }}
      PRERELEASE_BRANCH: ${{ needs.get-release-type.outputs.PRERELEASE_BRANCH }}
      PRODUCTION_VERSION: ${{ needs.get-release-type.outputs.PRODUCTION_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Calculate new RC version
        id: calculate-version
        run: |
          $prereleaseVersion = $env:PRERELEASE_VERSION
          $parts = $prereleaseVersion -split '\.'
          $currentRc = [int]$parts[3]
          $nextRc = $currentRc + 1
          $newRcVersion = "$($parts[0]).$($parts[1]).$($parts[2]).$nextRc"
          echo "New RC version: $newRcVersion"
          echo "NEW_VERSION=$newRcVersion" >> $env:GITHUB_OUTPUT

      - name: Create new RC release
        env: 
          NEW_VERSION: ${{ steps.calculate-version.outputs.NEW_VERSION }}
        run: |      
          gh release create $env:NEW_VERSION `
            --title "Release Candidate $($env:NEW_VERSION)" `
            --prerelease `
            --generate-notes `
            --notes-start-tag $env:PRODUCTION_VERSION `
            --target $env:TARGET_COMMIT

      - name: Delete old RC release
        run: gh release delete $env:PRERELEASE_VERSION --cleanup-tag --yes
      
  merge-branch:
    environment: ReleaseManagement
    runs-on: ubuntu-latest
    needs: [update-prerelease, hotfix-release]
    if: always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    env:
      GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
      TARGET_COMMIT: ${{ github.sha }}
      MERGE_BASE: ${{ needs.update-prerelease.outputs.MERGE_BASE || needs.hotfix-release.outputs.MERGE_BASE }}
      NEW_VERSION: ${{ needs.update-prerelease.outputs.NEW_VERSION || needs.hotfix-release.outputs.NEW_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Create merge branch
        id: create-merge-branch
        run: |          
          $mergeBranch = "merge/$($env:NEW_VERSION)"
          echo "MERGE_BRANCH=$mergeBranch" >> $env:GITHUB_OUTPUT

          git checkout -b $mergeBranch $env:TARGET_COMMIT
          git push -u origin $mergeBranch
      - name: Create Merge PR
        env:
          MERGE_BRANCH: ${{ steps.create-merge-branch.outputs.MERGE_BRANCH }}
        run: |
          gh pr create `
            --title "Release Candidate $($env:NEW_VERSION) to $(env:MERGE_BRANCH)" `
            --body "Merge RC $($env:NEW_VERSION) to $(env:MERGE_BRANCH)" `
            --base main `
            --head $env:MERGE_BASE `
            --label auto-merge
      - name: Attempt to merge PR
        env:
          AUTHOR_EMAIL: ${{ github.actor_id }}+github-actions[bot]@users.noreply.github.com
          MERGE_BRANCH: ${{ steps.create-merge-branch.outputs.MERGE_BRANCH }}
        run: |
          gh pr merge $env:MERGE_BRANCH `
              --author-email $env:AUTHOR_EMAIL `
              --merge `
              --auto `
              --delete-branch
