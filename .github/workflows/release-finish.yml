# When a release branch is created, this workflow will cut a release

# Manual steps:
#
# If:
# - Next Version = v2.3
#
# gh release create v2.3.0 --title "Release v2.3.0" --target release/v2.3  --generate-notes --notes-start-tag v2.2.0
# gh release delete v2.3.0-rc.4

name: Release - Finish

on:
  workflow_dispatch        

permissions:
  contents: write

defaults:
  run:
    shell: pwsh

jobs:
  finish-release:
    runs-on: ubuntu-latest
    environment: ReleaseManagement
    env:
      GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
      TARGET_COMMIT: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --depth=1 --tags
        
      - name: Determin versions
        id: determine-versions
        env:
          TARGET_REF_NAME: ${{ github.ref_name }}
        run: |
          $prereleaseVersion = gh release list --json tagName,isPrerelease --jq ".[] | select(.isPrerelease) | .tagName"
          echo "Last pre-release: $prereleaseVersion"

          if (-not $prereleaseVersion) {
              echo "No pre-release found"
              exit 1
          }
          # verify $prereleaseVersion points to the current commit
          git fetch origin $prereleaseVersion
          $prereleaseCommit = git rev-parse $prereleaseVersion
          if ($prereleaseCommit -ne $env:TARGET_COMMIT) {
              echo "$($env:TARGET_REF_NAME) is not the same as $prereleaseVersion"
              exit 1
          }

          echo "PRERELEASE_VERSION=$prereleaseVersion" >> $env:GITHUB_OUTPUT

          $productionVersion = gh release list --json tagName,isLatest --jq ".[] | select(.isLatest) | .tagName"
          if ($productionVersion) {
              echo "Current production release: $productionVersion"
              echo "PRODUCTION_VERSION=$productionVersion" >> $env:GITHUB_OUTPUT
          }

          $parts = $prereleaseVersion -split '\.'
          $major = $parts[0]
          $minor = $parts[1]
          $newVersion = "$major.$minor.0"
          echo "New version: $newVersion"
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT
          
      - name: Create release tag
        env:
          PRERELEASE_VERSION: ${{ steps.determine-versions.outputs.PRERELEASE_VERSION }}
          NEW_VERSION: ${{ steps.determine-versions.outputs.NEW_VERSION }}
        run: |
          git tag $env:NEW_VERSION $env:PRERELEASE_VERSION
          git push origin $env:NEW_VERSION

      - name: Create release
        env:
          PRERELEASE_VERSION: ${{ steps.determine-versions.outputs.PRERELEASE_VERSION }}
          NEW_VERSION: ${{ steps.determine-versions.outputs.NEW_VERSION }}
          PRODUCTION_VERSION: ${{ steps.determine-versions.outputs.PRODUCTION_VERSION }}
        run: |         
          $prereleaseVersion = $env:PRERELEASE_VERSION
          $newVersion = $env:NEW_VERSION
          $productionVersion = $env:PRODUCTION_VERSION

          # Create the release

          echo "Creating release $newVersion"
          if ($productionVersion) {
            gh release create $newVersion `
              --title "Release $newVersion" `
              --generate-notes `
              --notes-start-tag $productionVersion
          } else {
            gh release create $newVersion `
              --title "Release $newVersion" `
              --generate-notes
          } 

      - name: Delete pre-release
        env:
          PRERELEASE_VERSION: ${{ steps.determine-versions.outputs.PRERELEASE_VERSION }}
        run: gh release delete $env:PRERELEASE_VERSION --cleanup-tag --yes       
